KVM: use follow_pfnmap API

jira LE-3557
Rebuild_History Non-Buildable kernel-5.14.0-570.26.1.el9_6
commit-author Peter Xu <peterx@redhat.com>
commit 5731aacd54a883dd2c1a5e8c85e1fe78fc728dc7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-570.26.1.el9_6/5731aacd.failed

Use the new pfnmap API to allow huge MMIO mappings for VMs.  The rest work
is done perfectly on the other side (host_pfn_mapping_level()).

Link: https://lkml.kernel.org/r/20240826204353.2228736-11-peterx@redhat.com
	Signed-off-by: Peter Xu <peterx@redhat.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Sean Christopherson <seanjc@google.com>
	Cc: Alexander Gordeev <agordeev@linux.ibm.com>
	Cc: Alex Williamson <alex.williamson@redhat.com>
	Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Christian Borntraeger <borntraeger@linux.ibm.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Gavin Shan <gshan@redhat.com>
	Cc: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
	Cc: Heiko Carstens <hca@linux.ibm.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Jason Gunthorpe <jgg@nvidia.com>
	Cc: Matthew Wilcox <willy@infradead.org>
	Cc: Niklas Schnelle <schnelle@linux.ibm.com>
	Cc: Ryan Roberts <ryan.roberts@arm.com>
	Cc: Sven Schnelle <svens@linux.ibm.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will@kernel.org>
	Cc: Zi Yan <ziy@nvidia.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 5731aacd54a883dd2c1a5e8c85e1fe78fc728dc7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	virt/kvm/kvm_main.c
diff --cc virt/kvm/kvm_main.c
index b163a079fe65,f416d5e3f9c0..000000000000
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@@ -2878,13 -2860,11 +2878,15 @@@ static int hva_to_pfn_remapped(struct v
  			       unsigned long addr, bool write_fault,
  			       bool *writable, kvm_pfn_t *p_pfn)
  {
+ 	struct follow_pfnmap_args args = { .vma = vma, .address = addr };
  	kvm_pfn_t pfn;
- 	pte_t *ptep;
- 	pte_t pte;
- 	spinlock_t *ptl;
  	int r;
  
++<<<<<<< HEAD
 +	r = follow_pte(vma->vm_mm, addr, &ptep, &ptl);
++=======
+ 	r = follow_pfnmap_start(&args);
++>>>>>>> 5731aacd54a8 (KVM: use follow_pfnmap API)
  	if (r) {
  		/*
  		 * get_user_pages fails for VM_IO and VM_PFNMAP vmas and does
@@@ -2899,7 -2879,7 +2901,11 @@@
  		if (r)
  			return r;
  
++<<<<<<< HEAD
 +		r = follow_pte(vma->vm_mm, addr, &ptep, &ptl);
++=======
+ 		r = follow_pfnmap_start(&args);
++>>>>>>> 5731aacd54a8 (KVM: use follow_pfnmap API)
  		if (r)
  			return r;
  	}
* Unmerged path virt/kvm/kvm_main.c
